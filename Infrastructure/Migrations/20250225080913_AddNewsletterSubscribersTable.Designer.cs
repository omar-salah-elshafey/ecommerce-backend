// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250225080913_AddNewsletterSubscribersTable")]
    partial class AddNewsletterSubscribersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GovernorateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            GovernorateId = new Guid("01111111-1111-1111-1111-111111111111"),
                            Name = "الإسكندرية"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            GovernorateId = new Guid("01111111-1111-1111-1111-111111111111"),
                            Name = "برج العرب"
                        },
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-211111111112"),
                            GovernorateId = new Guid("02111111-1111-1111-1111-111111111111"),
                            Name = "دمنهور"
                        },
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-211111111113"),
                            GovernorateId = new Guid("02111111-1111-1111-1111-111111111111"),
                            Name = "رشيد"
                        },
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-211111111114"),
                            GovernorateId = new Guid("02111111-1111-1111-1111-111111111111"),
                            Name = "كفر الدوار"
                        },
                        new
                        {
                            Id = new Guid("21111111-1111-1111-1111-211111111115"),
                            GovernorateId = new Guid("02111111-1111-1111-1111-111111111111"),
                            Name = "إدكو"
                        },
                        new
                        {
                            Id = new Guid("31111111-1111-1111-1111-311111111112"),
                            GovernorateId = new Guid("03111111-1111-1111-1111-111111111111"),
                            Name = "كفر الشيخ"
                        },
                        new
                        {
                            Id = new Guid("31111111-1111-1111-1111-311111111113"),
                            GovernorateId = new Guid("03111111-1111-1111-1111-111111111111"),
                            Name = "دسوق"
                        },
                        new
                        {
                            Id = new Guid("31111111-1111-1111-1111-311111111114"),
                            GovernorateId = new Guid("03111111-1111-1111-1111-111111111111"),
                            Name = "بيلا"
                        },
                        new
                        {
                            Id = new Guid("31111111-1111-1111-1111-311111111115"),
                            GovernorateId = new Guid("03111111-1111-1111-1111-111111111111"),
                            Name = "فوه"
                        },
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-411111111112"),
                            GovernorateId = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "طنطا"
                        },
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-411111111113"),
                            GovernorateId = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "المحلة الكبرى"
                        },
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-411111111114"),
                            GovernorateId = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "كفر الزيات"
                        },
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-411111111115"),
                            GovernorateId = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "سمنود"
                        },
                        new
                        {
                            Id = new Guid("41111111-1111-1111-1111-411111111116"),
                            GovernorateId = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "زفتى"
                        },
                        new
                        {
                            Id = new Guid("51111111-1111-1111-1111-511111111112"),
                            GovernorateId = new Guid("05111111-1111-1111-1111-111111111111"),
                            Name = "شبين الكوم"
                        },
                        new
                        {
                            Id = new Guid("51111111-1111-1111-1111-511111111113"),
                            GovernorateId = new Guid("05111111-1111-1111-1111-111111111111"),
                            Name = "قويسنا"
                        },
                        new
                        {
                            Id = new Guid("51111111-1111-1111-1111-511111111114"),
                            GovernorateId = new Guid("05111111-1111-1111-1111-111111111111"),
                            Name = "منوف"
                        },
                        new
                        {
                            Id = new Guid("51111111-1111-1111-1111-511111111115"),
                            GovernorateId = new Guid("05111111-1111-1111-1111-111111111111"),
                            Name = "تلا"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111112"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "المنصورة"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111113"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "ميت غمر"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111114"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "أجا"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111115"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "دكرنس"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111116"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "المنزلة"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111117"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "الدراكسة"
                        },
                        new
                        {
                            Id = new Guid("61111111-1111-1111-1111-611111111118"),
                            GovernorateId = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "نبروه"
                        },
                        new
                        {
                            Id = new Guid("71111111-1111-1111-1111-711111111112"),
                            GovernorateId = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "الزقازيق"
                        },
                        new
                        {
                            Id = new Guid("71111111-1111-1111-1111-711111111113"),
                            GovernorateId = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "العاشر من رمضان"
                        },
                        new
                        {
                            Id = new Guid("71111111-1111-1111-1111-711111111114"),
                            GovernorateId = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "بلبيس"
                        },
                        new
                        {
                            Id = new Guid("71111111-1111-1111-1111-711111111115"),
                            GovernorateId = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "منيا القمح"
                        },
                        new
                        {
                            Id = new Guid("71111111-1111-1111-1111-711111111116"),
                            GovernorateId = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "أبو كبير"
                        },
                        new
                        {
                            Id = new Guid("81111111-1111-1111-1111-811111111112"),
                            GovernorateId = new Guid("08111111-1111-1111-1111-111111111111"),
                            Name = "دمياط"
                        },
                        new
                        {
                            Id = new Guid("81111111-1111-1111-1111-811111111113"),
                            GovernorateId = new Guid("08111111-1111-1111-1111-111111111111"),
                            Name = "رأس البر"
                        },
                        new
                        {
                            Id = new Guid("81111111-1111-1111-1111-811111111114"),
                            GovernorateId = new Guid("08111111-1111-1111-1111-111111111111"),
                            Name = "كفر سعد"
                        },
                        new
                        {
                            Id = new Guid("81111111-1111-1111-1111-811111111115"),
                            GovernorateId = new Guid("08111111-1111-1111-1111-111111111111"),
                            Name = "فارسكور"
                        },
                        new
                        {
                            Id = new Guid("91111111-1111-1111-1111-911111111112"),
                            GovernorateId = new Guid("09111111-1111-1111-1111-111111111111"),
                            Name = "بنها"
                        },
                        new
                        {
                            Id = new Guid("91111111-1111-1111-1111-911111111113"),
                            GovernorateId = new Guid("09111111-1111-1111-1111-111111111111"),
                            Name = "شبرا الخيمة"
                        },
                        new
                        {
                            Id = new Guid("91111111-1111-1111-1111-911111111114"),
                            GovernorateId = new Guid("09111111-1111-1111-1111-111111111111"),
                            Name = "قليوب"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-101111111112"),
                            GovernorateId = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "القاهرة"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-101111111113"),
                            GovernorateId = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "مدينة نصر"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-101111111114"),
                            GovernorateId = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "مصر الجديدة"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-101111111115"),
                            GovernorateId = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "حلوان"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-101111111116"),
                            GovernorateId = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "الجيزة"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Governorate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01111111-1111-1111-1111-111111111111"),
                            Name = "الإسكندرية"
                        },
                        new
                        {
                            Id = new Guid("02111111-1111-1111-1111-111111111111"),
                            Name = "البحيرة"
                        },
                        new
                        {
                            Id = new Guid("03111111-1111-1111-1111-111111111111"),
                            Name = "كفر الشيخ"
                        },
                        new
                        {
                            Id = new Guid("04111111-1111-1111-1111-111111111111"),
                            Name = "الغربية"
                        },
                        new
                        {
                            Id = new Guid("05111111-1111-1111-1111-111111111111"),
                            Name = "المنوفية"
                        },
                        new
                        {
                            Id = new Guid("06111111-1111-1111-1111-111111111111"),
                            Name = "الدقهلية"
                        },
                        new
                        {
                            Id = new Guid("07111111-1111-1111-1111-111111111111"),
                            Name = "الشرقية"
                        },
                        new
                        {
                            Id = new Guid("08111111-1111-1111-1111-111111111111"),
                            Name = "دمياط"
                        },
                        new
                        {
                            Id = new Guid("09111111-1111-1111-1111-111111111111"),
                            Name = "القليوبية"
                        },
                        new
                        {
                            Id = new Guid("10111111-1111-1111-1111-111111111111"),
                            Name = "القاهرة"
                        });
                });

            modelBuilder.Entity("Domain.Entities.NewsletterSubscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SubscribedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UnsubscribedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NewsletterSubscribers");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SnapShotPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SalesCount")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("SKU")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7e53a491-a9de-4c75-af44-ff3271a5176c",
                            AccessFailedCount = 0,
                            ChildrenCount = 0,
                            ConcurrencyStamp = "b2b854f0-7946-45ae-8334-21968d358a44",
                            DateCreated = new DateTime(2025, 2, 25, 8, 9, 11, 614, DateTimeKind.Utc).AddTicks(3270),
                            Email = "super@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            Gender = 1,
                            HasChildren = false,
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MaritalStatus = 1,
                            NormalizedEmail = "SUPER@ADMIN.COM",
                            NormalizedUserName = "SUPER_ADMIN",
                            Online = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDGglUnn9ldobMMU/6bTOws0CKyzkBjRzmL5j1fcDKxKVOGg8Eq1xRjb8BFlfao/yA==",
                            PhoneNumber = "01234567891",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5d3cf58c-7714-4254-9cef-08545ea1f484",
                            TwoFactorEnabled = false,
                            UserName = "super_admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UsersMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UsersMessages");
                });

            modelBuilder.Entity("Domain.Entities.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("Domain.Entities.WishlistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishlistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a330b209-871f-45fc-9a8d-f357f9bff3b1",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b332b209-871f-45fc-9a8d-f357f9bff3b1",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7e53a491-a9de-4c75-af44-ff3271a5176c",
                            RoleId = "a330b209-871f-45fc-9a8d-f357f9bff3b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.Governorate", "Governorate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.OwnsMany("Domain.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("Domain.Entities.Wishlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WishlistItem", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Governorate", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Wishlist")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
